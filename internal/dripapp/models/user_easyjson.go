// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9e1087fdDecodeDripappInternalDripappModels(in *jlexer.Lexer, out *Users) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]User, 0, 0)
					} else {
						out.Users = []User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v1 User
					(v1).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels(out *jwriter.Writer, in Users) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Users {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Users) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Users) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Users) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Users) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels1(in *jlexer.Lexer, out *UserReportsCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userReportsCount":
			out.Count = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels1(out *jwriter.Writer, in UserReportsCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userReportsCount\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserReportsCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserReportsCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserReportsCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserReportsCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels1(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels2(in *jlexer.Lexer, out *UserReaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "reaction":
			out.Reaction = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels2(out *jwriter.Writer, in UserReaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"reaction\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Reaction))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserReaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserReaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserReaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserReaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels2(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "email":
			out.Email = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "gender":
			out.Gender = string(in.String())
		case "prefer":
			out.Prefer = string(in.String())
		case "fromage":
			out.FromAge = uint32(in.Uint32())
		case "toage":
			out.ToAge = uint32(in.Uint32())
		case "date":
			out.Date = string(in.String())
		case "age":
			out.Age = uint32(in.Uint32())
		case "description":
			out.Description = string(in.String())
		case "imgs":
			if in.IsNull() {
				in.Skip()
				out.Imgs = nil
			} else {
				in.Delim('[')
				if out.Imgs == nil {
					if !in.IsDelim(']') {
						out.Imgs = make([]string, 0, 4)
					} else {
						out.Imgs = []string{}
					}
				} else {
					out.Imgs = (out.Imgs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Imgs = append(out.Imgs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Tags = append(out.Tags, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reportStatus":
			out.ReportStatus = string(in.String())
		case "payment":
			out.Payment = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels3(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Gender != "" {
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Gender))
	}
	if in.Prefer != "" {
		const prefix string = ",\"prefer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Prefer))
	}
	if in.FromAge != 0 {
		const prefix string = ",\"fromage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.FromAge))
	}
	if in.ToAge != 0 {
		const prefix string = ",\"toage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.ToAge))
	}
	if in.Date != "" {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	if in.Age != 0 {
		const prefix string = ",\"age\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Age))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Imgs) != 0 {
		const prefix string = ",\"imgs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Imgs {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Tags {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.ReportStatus != "" {
		const prefix string = ",\"reportStatus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReportStatus))
	}
	if in.Payment {
		const prefix string = ",\"payment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Payment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels3(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels4(in *jlexer.Lexer, out *Tags) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allTags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AllTags = make(map[uint64]Tag)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v10 Tag
					(v10).UnmarshalEasyJSON(in)
					(out.AllTags)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tagsCount":
			out.Count = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels4(out *jwriter.Writer, in Tags) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allTags\":"
		out.RawString(prefix[1:])
		if in.AllTags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.AllTags {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v11Name))
				out.RawByte(':')
				(v11Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"tagsCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tags) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tags) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tags) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tags) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels4(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels5(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tagText":
			out.TagName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels5(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tagText\":"
		out.RawString(prefix[1:])
		out.String(string(in.TagName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels5(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels6(in *jlexer.Lexer, out *Subscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subscriptionActive":
			out.SubscriptionActive = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels6(out *jwriter.Writer, in Subscription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"subscriptionActive\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.SubscriptionActive))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels6(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels7(in *jlexer.Lexer, out *Search) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "searchTmpl":
			out.SearchingTmpl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels7(out *jwriter.Writer, in Search) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"searchTmpl\":"
		out.RawString(prefix[1:])
		out.String(string(in.SearchingTmpl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Search) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Search) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Search) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Search) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels7(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels8(in *jlexer.Lexer, out *Reports) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allReports":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AllReports = make(map[uint64]Report)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v12 Report
					(v12).UnmarshalEasyJSON(in)
					(out.AllReports)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "reportsCount":
			out.Count = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels8(out *jwriter.Writer, in Reports) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allReports\":"
		out.RawString(prefix[1:])
		if in.AllReports == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.AllReports {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v13Name))
				out.RawByte(':')
				(v13Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"reportsCount\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reports) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reports) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reports) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reports) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels8(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels9(in *jlexer.Lexer, out *Report) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reportDesc":
			out.ReportDesc = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels9(out *jwriter.Writer, in Report) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reportDesc\":"
		out.RawString(prefix[1:])
		out.String(string(in.ReportDesc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Report) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Report) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Report) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Report) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels9(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels10(in *jlexer.Lexer, out *NewReport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "toId":
			out.ToId = uint64(in.Uint64())
		case "reportDesc":
			out.ReportDesc = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels10(out *jwriter.Writer, in NewReport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"toId\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ToId))
	}
	{
		const prefix string = ",\"reportDesc\":"
		out.RawString(prefix)
		out.String(string(in.ReportDesc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewReport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewReport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewReport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewReport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels10(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels11(in *jlexer.Lexer, out *Matches) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allUsers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AllUsers = make(map[uint64]User)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v14 User
					(v14).UnmarshalEasyJSON(in)
					(out.AllUsers)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "matchesCount":
			out.Count = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels11(out *jwriter.Writer, in Matches) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allUsers\":"
		out.RawString(prefix[1:])
		if in.AllUsers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.AllUsers {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v15Name))
				out.RawByte(':')
				(v15Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"matchesCount\":"
		out.RawString(prefix)
		out.String(string(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Matches) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Matches) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Matches) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Matches) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels11(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels12(in *jlexer.Lexer, out *Match) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "match":
			out.Match = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels12(out *jwriter.Writer, in Match) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"match\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Match))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Match) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Match) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Match) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Match) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels12(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels13(in *jlexer.Lexer, out *LoginUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels13(out *jwriter.Writer, in LoginUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels13(l, v)
}
func easyjson9e1087fdDecodeDripappInternalDripappModels14(in *jlexer.Lexer, out *Likes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allUsers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.AllUsers = make(map[uint64]User)
				for !in.IsDelim('}') {
					key := uint64(in.Uint64Str())
					in.WantColon()
					var v16 User
					(v16).UnmarshalEasyJSON(in)
					(out.AllUsers)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "likesCount":
			out.Count = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDripappInternalDripappModels14(out *jwriter.Writer, in Likes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allUsers\":"
		out.RawString(prefix[1:])
		if in.AllUsers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.AllUsers {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.Uint64Str(uint64(v17Name))
				out.RawByte(':')
				(v17Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"likesCount\":"
		out.RawString(prefix)
		out.String(string(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Likes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeDripappInternalDripappModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Likes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeDripappInternalDripappModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Likes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeDripappInternalDripappModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Likes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeDripappInternalDripappModels14(l, v)
}
