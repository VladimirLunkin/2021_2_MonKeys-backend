// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson377dcee4DecodeDripappInternalDripappModels(in *jlexer.Lexer, out *YooKassaResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "recipient":
			(out.Recipient).UnmarshalEasyJSON(in)
		case "created_at":
			out.CreatedAt = string(in.String())
		case "confirmation":
			(out.Confirmation).UnmarshalEasyJSON(in)
		case "test":
			out.Test = bool(in.Bool())
		case "paid":
			out.Paid = bool(in.Bool())
		case "refundable":
			out.Refundable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeDripappInternalDripappModels(out *jwriter.Writer, in YooKassaResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		(in.Recipient).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"confirmation\":"
		out.RawString(prefix)
		(in.Confirmation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"test\":"
		out.RawString(prefix)
		out.Bool(bool(in.Test))
	}
	{
		const prefix string = ",\"paid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Paid))
	}
	{
		const prefix string = ",\"refundable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Refundable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v YooKassaResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeDripappInternalDripappModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v YooKassaResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeDripappInternalDripappModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *YooKassaResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeDripappInternalDripappModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *YooKassaResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeDripappInternalDripappModels(l, v)
}
func easyjson377dcee4DecodeDripappInternalDripappModels1(in *jlexer.Lexer, out *RedirectUrl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "redirectUrl":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeDripappInternalDripappModels1(out *jwriter.Writer, in RedirectUrl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"redirectUrl\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RedirectUrl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeDripappInternalDripappModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RedirectUrl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeDripappInternalDripappModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RedirectUrl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeDripappInternalDripappModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RedirectUrl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeDripappInternalDripappModels1(l, v)
}
func easyjson377dcee4DecodeDripappInternalDripappModels2(in *jlexer.Lexer, out *RecipientType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountId = string(in.String())
		case "gateway_id":
			out.GatewayId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeDripappInternalDripappModels2(out *jwriter.Writer, in RecipientType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountId))
	}
	{
		const prefix string = ",\"gateway_id\":"
		out.RawString(prefix)
		out.String(string(in.GatewayId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RecipientType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeDripappInternalDripappModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RecipientType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeDripappInternalDripappModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RecipientType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeDripappInternalDripappModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RecipientType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeDripappInternalDripappModels2(l, v)
}
func easyjson377dcee4DecodeDripappInternalDripappModels3(in *jlexer.Lexer, out *PaymentNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "object":
			(out.Object).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeDripappInternalDripappModels3(out *jwriter.Writer, in PaymentNotification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"object\":"
		out.RawString(prefix[1:])
		(in.Object).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentNotification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeDripappInternalDripappModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentNotification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeDripappInternalDripappModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentNotification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeDripappInternalDripappModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentNotification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeDripappInternalDripappModels3(l, v)
}
func easyjson377dcee4DecodeDripappInternalDripappModels4(in *jlexer.Lexer, out *PaymentInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Amount = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Amount)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "capture":
			out.Capture = bool(in.Bool())
		case "confirmation":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Confirmation = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Confirmation)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeDripappInternalDripappModels4(out *jwriter.Writer, in PaymentInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		if in.Amount == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Amount {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.String(string(v3Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"capture\":"
		out.RawString(prefix)
		out.Bool(bool(in.Capture))
	}
	{
		const prefix string = ",\"confirmation\":"
		out.RawString(prefix)
		if in.Confirmation == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Confirmation {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeDripappInternalDripappModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeDripappInternalDripappModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeDripappInternalDripappModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeDripappInternalDripappModels4(l, v)
}
func easyjson377dcee4DecodeDripappInternalDripappModels5(in *jlexer.Lexer, out *Payment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "period":
			out.Period = uint64(in.Uint64())
		case "amount":
			out.Amount = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeDripappInternalDripappModels5(out *jwriter.Writer, in Payment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"period\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Period))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Payment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeDripappInternalDripappModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeDripappInternalDripappModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeDripappInternalDripappModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeDripappInternalDripappModels5(l, v)
}
func easyjson377dcee4DecodeDripappInternalDripappModels6(in *jlexer.Lexer, out *ObjectType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeDripappInternalDripappModels6(out *jwriter.Writer, in ObjectType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeDripappInternalDripappModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObjectType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeDripappInternalDripappModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeDripappInternalDripappModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObjectType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeDripappInternalDripappModels6(l, v)
}
func easyjson377dcee4DecodeDripappInternalDripappModels7(in *jlexer.Lexer, out *ConfirmationType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "confirmation_url":
			out.ConfirmationUrl = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeDripappInternalDripappModels7(out *jwriter.Writer, in ConfirmationType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"confirmation_url\":"
		out.RawString(prefix)
		out.String(string(in.ConfirmationUrl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfirmationType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeDripappInternalDripappModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfirmationType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeDripappInternalDripappModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfirmationType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeDripappInternalDripappModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfirmationType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeDripappInternalDripappModels7(l, v)
}
func easyjson377dcee4DecodeDripappInternalDripappModels8(in *jlexer.Lexer, out *AmountType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson377dcee4EncodeDripappInternalDripappModels8(out *jwriter.Writer, in AmountType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AmountType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson377dcee4EncodeDripappInternalDripappModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AmountType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson377dcee4EncodeDripappInternalDripappModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AmountType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson377dcee4DecodeDripappInternalDripappModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AmountType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson377dcee4DecodeDripappInternalDripappModels8(l, v)
}
