// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	models "dripapp/internal/dripapp/models"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// AddPhoto provides a mock function with given fields: c, photo, fileName
func (_m *UserUsecase) AddPhoto(c context.Context, photo io.Reader, fileName string) (models.Photo, error) {
	ret := _m.Called(c, photo, fileName)

	var r0 models.Photo
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string) models.Photo); ok {
		r0 = rf(c, photo, fileName)
	} else {
		r0 = ret.Get(0).(models.Photo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, string) error); ok {
		r1 = rf(c, photo, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddReport provides a mock function with given fields: c, report
func (_m *UserUsecase) AddReport(c context.Context, report models.NewReport) error {
	ret := _m.Called(c, report)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.NewReport) error); ok {
		r0 = rf(c, report)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckPayment provides a mock function with given fields: c
func (_m *UserUsecase) CheckPayment(c context.Context) (models.Payment, error) {
	ret := _m.Called(c)

	var r0 models.Payment
	if rf, ok := ret.Get(0).(func(context.Context) models.Payment); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(models.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePayment provides a mock function with given fields: c, period
func (_m *UserUsecase) CreatePayment(c context.Context, period string) (models.Payment, error) {
	ret := _m.Called(c, period)

	var r0 models.Payment
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Payment); ok {
		r0 = rf(c, period)
	} else {
		r0 = ret.Get(0).(models.Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CurrentUser provides a mock function with given fields: c
func (_m *UserUsecase) CurrentUser(c context.Context) (models.User, error) {
	ret := _m.Called(c)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context) models.User); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePhoto provides a mock function with given fields: c, photo
func (_m *UserUsecase) DeletePhoto(c context.Context, photo models.Photo) error {
	ret := _m.Called(c, photo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Photo) error); ok {
		r0 = rf(c, photo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditProfile provides a mock function with given fields: c, newUserData
func (_m *UserUsecase) EditProfile(c context.Context, newUserData models.User) (models.User, error) {
	ret := _m.Called(c, newUserData)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.User); ok {
		r0 = rf(c, newUserData)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(c, newUserData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReports provides a mock function with given fields: c
func (_m *UserUsecase) GetAllReports(c context.Context) (models.Reports, error) {
	ret := _m.Called(c)

	var r0 models.Reports
	if rf, ok := ret.Get(0).(func(context.Context) models.Reports); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(models.Reports)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTags provides a mock function with given fields: c
func (_m *UserUsecase) GetAllTags(c context.Context) (models.Tags, error) {
	ret := _m.Called(c)

	var r0 models.Tags
	if rf, ok := ret.Get(0).(func(context.Context) models.Tags); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(models.Tags)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: c, logUserData
func (_m *UserUsecase) Login(c context.Context, logUserData models.LoginUser) (models.User, error) {
	ret := _m.Called(c, logUserData)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, models.LoginUser) models.User); ok {
		r0 = rf(c, logUserData)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.LoginUser) error); ok {
		r1 = rf(c, logUserData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NextUser provides a mock function with given fields: c
func (_m *UserUsecase) NextUser(c context.Context) ([]models.User, error) {
	ret := _m.Called(c)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reaction provides a mock function with given fields: c, reactionData
func (_m *UserUsecase) Reaction(c context.Context, reactionData models.UserReaction) (models.Match, error) {
	ret := _m.Called(c, reactionData)

	var r0 models.Match
	if rf, ok := ret.Get(0).(func(context.Context, models.UserReaction) models.Match); ok {
		r0 = rf(c, reactionData)
	} else {
		r0 = ret.Get(0).(models.Match)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.UserReaction) error); ok {
		r1 = rf(c, reactionData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: c, logUserData
func (_m *UserUsecase) Signup(c context.Context, logUserData models.LoginUser) (models.User, error) {
	ret := _m.Called(c, logUserData)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, models.LoginUser) models.User); ok {
		r0 = rf(c, logUserData)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.LoginUser) error); ok {
		r1 = rf(c, logUserData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayment provides a mock function with given fields: c, paymentId
func (_m *UserUsecase) UpdatePayment(c context.Context, paymentId uint64) error {
	ret := _m.Called(c, paymentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(c, paymentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserLikes provides a mock function with given fields: c
func (_m *UserUsecase) UserLikes(c context.Context) (models.Likes, error) {
	ret := _m.Called(c)

	var r0 models.Likes
	if rf, ok := ret.Get(0).(func(context.Context) models.Likes); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(models.Likes)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersMatches provides a mock function with given fields: c
func (_m *UserUsecase) UsersMatches(c context.Context) (models.Matches, error) {
	ret := _m.Called(c)

	var r0 models.Matches
	if rf, ok := ret.Get(0).(func(context.Context) models.Matches); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(models.Matches)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersMatchesWithSearching provides a mock function with given fields: c, searchData
func (_m *UserUsecase) UsersMatchesWithSearching(c context.Context, searchData models.Search) (models.Matches, error) {
	ret := _m.Called(c, searchData)

	var r0 models.Matches
	if rf, ok := ret.Get(0).(func(context.Context, models.Search) models.Matches); ok {
		r0 = rf(c, searchData)
	} else {
		r0 = ret.Get(0).(models.Matches)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Search) error); ok {
		r1 = rf(c, searchData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
